x = pi/2
cos(x)
sin(x)
sin(sin(x)+x)
library(caret)
library(survival)
install.packages("survival")
log(100,10)
log(10,100)
c(1,2,3,4)
c('ab','cd','ef', 3)
#3 is converted to character type
x = c(1,2,3,4)
c(x,x)
seq(1:10)
seq(1:20, by 2)
seq(1:20, by = 2)
seq(1:20, by=2)
seq(1,20, by=2)
seq(1,20, length=3)
seq(1,20, length=8)
rnorm(15)
rnorm(30)
hist(rnorm(20))
rnorm(20, mean = 10, sd = 0.2)
runif(10, min = 2, max = 3)
v <- 1:12
dim(v) <- c(6,2)
View(v)
View(v)
View(v)
vector1 <- 1:4
vector2 <- 5:8
vector3 <- 9:12
cbind(vector1, vector2, vector3)
row1 <- 1:3
row2 <- 4:6
row3 <- 7:9
row4 <- 10:12
rbind(row1, row2, row3, row4)
install.packages("ggplot2")
diamonds
library(ggplot2)
library(tidyverse)
install.packages("rlang")
library(tidyverse)
library(tidyselect)
detach("package:tidyselect", unload = TRUE)
library(tidyselect)
library(knitr)
diamonds
names(diamonds)
names(diamonds)
dim(diamonds)
unique(diamonds$clarity)
c(outer(first, second, FUN = paste))
second = letters[1:5]
c(outer(first, second, FUN = paste))
c(outer(first, second, FUN = paste, sep=""))
#5
first = letters[1:5]
second = letters[1:5]
c(outer(first, second, FUN = paste, sep=""))
ggplot(
data = diamonds, aes(x = cut)
) + geom_bar()
ggplot(
data = diamonds, aes(x = cut)
) + geom_bar(aes(fill = cut))
diamonds %>%
group_by(cut) %>%
summarise(cnt = n())/now(diamonds)
diamonds %>%
group_by(cut) %>%
summarise(cnt = n()) $>$
mutate(prop = cnt/sum(cnt))
library(dplyr)
diamonds %>%
group_by(cut) %>%
summarise(cnt = n()) $>$
mutate(prop = cnt/sum(cnt))
library(dplyr)
diamonds %>%
group_by(cut) %>%
summarise(cnt = n()) %>%
mutate(prop = cnt/sum(cnt))
diamonds %>%
group_by(cut) %>%
summarise(cnt = n()) %>%
mutate(prop = cnt/sum(cnt)) %>%
ggplot()+
geom_bar(
aes(x = cut, y = prop),
stat = 'identity'
)
#6
compares <- function(str1, str2){
if (nchar(str1) == nchar(str2)){
return('Equal length')
}
else{
return('Not Equal length')
}
}
g <- ggplot(data = diamonds, aes(x = carat))
g + geom_histogram(binwidth = 1)
g + geom_histogram(binwidth = 0.1)
g + geom_histogram(binwidth = 0.01)
g + geom_histogram()
g <- ggplot(data = diamonds, aes(x = depth))
zoom <- coord_cartesian(xlim = c(55, 70))
g + geom_histogram(binwidth = 0.2) + zoom
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(binwidth = 500) + facet_wrap(~ cut)
ggplot(data = diamonds, aes(x = price)) +
geom_histogram(binwidth = 500) +
facet_wrap(~ cut)+geom_freqpoly(binwidth = 500)
ggplot(data = diamonds, aes(x = price)) +
facet_wrap(~ cut)+
geom_freqpoly(aes(color = cut),binwidth = 500)
ggplot(data = diamonds, aes(x = price)) +
geom_freqpoly(aes(color = cut),binwidth = 500)
install.packages('shiny')
library(bslib)
install.packages("shiny")
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "pillar", "rlang", "spatial", "xfun"))
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "pillar", "rlang", "spatial", "xfun"))
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "pillar", "rlang", "spatial", "xfun"))
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "pillar", "rlang", "spatial", "xfun"))
shiny::runApp('nbashiny/nbaanalysis')
